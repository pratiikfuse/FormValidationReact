{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\AccioJob\\\\frontend4\\\\formvalidationreact\\\\src\\\\components\\\\Component.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Component() {\n  _s();\n  const [password, setPassword] = useState(\"\");\n  const [isEmailInValid, setIsEmailInValid] = useState(true);\n  const [isPasswordInvalid, setIsPassWordInvalid] = useState(true);\n  const [isConfirmPasswordInvalid, setIsConfirmPasswordInvalid] = useState(true);\n  function submitForm() {\n    if (isEmailInValid || isPasswordInvalid || isConfirmPasswordInvalid) {\n      alert(\"form is not complete\");\n      return;\n    }\n    alert(\"form submitted successfully\");\n  }\n  function emailHandler(e) {\n    let email = e.target.value;\n    let regex = /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/;\n    console.log(regex.test(email));\n    if (!regex.test(email)) {\n      setIsEmailInValid(true);\n    } else {\n      setIsEmailInValid(false);\n    }\n  }\n  function passwordHandler(e) {\n    let password = e.target.value;\n    setPassword(password);\n    if (password.length < 8) {\n      setIsPassWordInvalid(true);\n    } else {\n      setIsPassWordInvalid(false);\n    }\n  }\n  function confirmPasswordHandler(e) {\n    let confirmPassword = e.target.value;\n    if (confirmPassword !== password) {\n      setIsConfirmPasswordInvalid(true);\n    } else {\n      setIsConfirmPasswordInvalid(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"formContainer\",\n    onSubmit: submitForm,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: isEmailInValid ? \"redBorder inputs\" : \"inputs\",\n        type: \"email\",\n        id: \"email\",\n        required: true,\n        onChange: emailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: isEmailInValid && \"Invalid email!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: isPasswordInvalid ? \"redBorder inputs\" : \"inputs\",\n        type: \"password\",\n        id: \"password\",\n        required: true,\n        onChange: passwordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: isPasswordInvalid && \"password must be at least 8 characters long !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"passwords\",\n        children: \"Confirm Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: isConfirmPasswordInvalid ? \"redBorder inputs\" : \"inputs\",\n        type: \"password\",\n        id: \"passwords\",\n        required: true,\n        onChange: confirmPasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: isConfirmPasswordInvalid && \"password do not match !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"signupButton\",\n      onClick: submitForm,\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Component, \"Fh8TuqmS+RJp4F4zDx2NChFq87w=\");\n_c = Component;\nexport default Component;\nvar _c;\n$RefreshReg$(_c, \"Component\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Component","_s","password","setPassword","isEmailInValid","setIsEmailInValid","isPasswordInvalid","setIsPassWordInvalid","isConfirmPasswordInvalid","setIsConfirmPasswordInvalid","submitForm","alert","emailHandler","e","email","target","value","regex","console","log","test","passwordHandler","length","confirmPasswordHandler","confirmPassword","className","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","required","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/AccioJob/frontend4/formvalidationreact/src/components/Component.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Component() {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isEmailInValid, setIsEmailInValid] = useState(true);\r\n  const [isPasswordInvalid, setIsPassWordInvalid] = useState(true);\r\n  const [isConfirmPasswordInvalid, setIsConfirmPasswordInvalid] =\r\n    useState(true);\r\n\r\n  function submitForm() {\r\n    if (isEmailInValid || isPasswordInvalid || isConfirmPasswordInvalid) {\r\n      alert(\"form is not complete\");\r\n      return;\r\n    }\r\n    alert(\"form submitted successfully\");\r\n  }\r\n\r\n  function emailHandler(e) {\r\n    let email = e.target.value;\r\n    let regex = /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/;\r\n    console.log(regex.test(email));\r\n    if (!regex.test(email)) {\r\n      setIsEmailInValid(true);\r\n    } else {\r\n      setIsEmailInValid(false);\r\n    }\r\n  }\r\n\r\n  function passwordHandler(e) {\r\n    let password = e.target.value;\r\n    setPassword(password);\r\n    if (password.length < 8) {\r\n      setIsPassWordInvalid(true);\r\n    } else {\r\n      setIsPassWordInvalid(false);\r\n    }\r\n  }\r\n  function confirmPasswordHandler(e) {\r\n    let confirmPassword = e.target.value;\r\n\r\n    if (confirmPassword !== password) {\r\n      setIsConfirmPasswordInvalid(true);\r\n    } else {\r\n      setIsConfirmPasswordInvalid(false);\r\n    }\r\n  }\r\n  return (\r\n    <form className=\"formContainer\" onSubmit={submitForm}>\r\n      <div>\r\n        <label htmlFor=\"email\">Email:</label>\r\n        <input\r\n          className={isEmailInValid ? \"redBorder inputs\" : \"inputs\"}\r\n          type=\"email\"\r\n          id=\"email\"\r\n          required\r\n          onChange={emailHandler}\r\n        />\r\n        <p className=\"error\">{isEmailInValid && \"Invalid email!\"}</p>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"password\">Password:</label>\r\n        <input\r\n          className={isPasswordInvalid ? \"redBorder inputs\" : \"inputs\"}\r\n          type=\"password\"\r\n          id=\"password\"\r\n          required\r\n          onChange={passwordHandler}\r\n        />\r\n        <p className=\"error\">\r\n          {isPasswordInvalid && \"password must be at least 8 characters long !\"}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"passwords\">Confirm Password:</label>\r\n        <input\r\n          className={isConfirmPasswordInvalid ? \"redBorder inputs\" : \"inputs\"}\r\n          type=\"password\"\r\n          id=\"passwords\"\r\n          required\r\n          onChange={confirmPasswordHandler}\r\n        />\r\n        <p className=\"error\">\r\n          {isConfirmPasswordInvalid && \"password do not match !\"}\r\n        </p>\r\n      </div>\r\n      <button id=\"signupButton\" onClick={submitForm}>\r\n        Sign Up\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Component;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}